@page "/"
@using ChatCodeChallenge.Models
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@implements IAsyncDisposable

<PageTitle>Index</PageTitle>

<div class="form-group">
    <label>
        User:
        <input @bind="userInput" />
    </label>
</div>
<div class="form-group">
    <label>
        Message:
        <input @bind="messageInput" size="50" />
    </label>
</div>
<button @onclick="Send" disabled="@(!IsConnected)">Send</button>

<hr>
<div style="overflow-y:auto; ">
    <ul id="messagesList">
    @foreach (var message in messages)
    {

        <li>@message.UserName : @message.Message <span style="float:right"> @message.TimeStamp </span> </li>
    }
    </ul>
</div>


@code {
    private HubConnection? hubConnection;
    private List<ChatMessage> messages = new List<ChatMessage>();
    private string? userInput;
    private string? messageInput;
    public int messageCount = 0;
    public int maxMessageCount = 50;


    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/chatHub"))
            .Build();


        hubConnection.On<string, string, DateTime>("ReceiveMessage", (user, message, timestamp) =>
         {
             messages.Add(new ChatMessage
                 {
                     UserName = user,
                     Message = message,
                     TimeStamp = timestamp
                 });
             messageCount++;
             messages.OrderBy(x => x.TimeStamp);

             if (messages.Count > maxMessageCount)
             {
                 messages.RemoveAt(0);
             }

             InvokeAsync(StateHasChanged);
         });


        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if (hubConnection is not null)
        {
            if (!string.IsNullOrEmpty(messageInput))
            {
                var hubMethod = messageInput.StartsWith("/stock=") ? "PostCommandMessage" : "SendMessage";
                await hubConnection.SendAsync(hubMethod, userInput, messageInput,DateTime.Now);

                //messageInput = "";
            }
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}